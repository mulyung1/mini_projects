# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SpiralGenerator
                                 A QGIS plugin
 This plugin creates spiral (similar to a loxodrome) LineStrings. Starting from a given coordinate, with given parameters, create 10 right and 10 left logarithmic spirals every 36 degrees, which pass through the Earth and end at the antipodal point of the starting coordinate.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-29
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Victor Mulyungi
        email                : victorsonofmartin@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
import math
from qgis.PyQt.QtWidgets import QDialog, QVBoxLayout, QGroupBox, QCheckBox, QLineEdit, QPushButton, QLabel, QHBoxLayout
from qgis.core import QgsProject, QgsVectorLayer, QgsField, QgsFeature, QgsGeometry, QgsPointXY, QgsLineString, QgsLayerTreeLayer
from qgis.PyQt.QtCore import QVariant
from qgis.gui import QgsMapToolEmitPoint
from qgis.utils import iface
from pyproj import Geod
from qgis import processing
from qgis.PyQt.QtCore import Qt


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .sSpiralgenerator_dialog import SpiralGeneratorDialog
import os.path


class SpiralGenerator:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        """initialise plugin parameters"""
        self.center_point = None
        self.last_used_group_name = None
        # Hardcoded spiral parameters
        self.params = {
            'spiral_stepping': 200,       # Number of spiral segments
            'spiral_ratio': 0.000318,     # Growth factor
            'density': 0.6,               # Point density along spiral
            'cut_off_points': 0.1       # Antipode proximity threshold (degrees)
            #'min_point_distance': 1       # Minimum distance between points (km)
        }
        self.geod = Geod(ellps='WGS84')

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SpiralGenerator_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Spiral Generator')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SpiralGenerator', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/sSpiralgenerator/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Generate spiral lines(similar to a loxodrome)'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Spiral Generator'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SpiralGeneratorDialog()


            self.cw_checks = [self.dlg.checkBox_1, self.dlg.checkBox_2, self.dlg.checkBox_3, self.dlg.checkBox_4, self.dlg.checkBox_5,
                             self.dlg.checkBox_6, self.dlg.checkBox_7, self.dlg.checkBox_8, self.dlg.checkBox_9, self.dlg.checkBox_10]
            self.ccw_checks = [self.dlg.checkBox_11, self.dlg.checkBox_12, self.dlg.checkBox_13, self.dlg.checkBox_14, self.dlg.checkBox_15,
                              self.dlg.checkBox_16, self.dlg.checkBox_17, self.dlg.checkBox_18, self.dlg.checkBox_19, self.dlg.checkBox_20]
                    # Co
        self.dlg.setWindowModality(Qt.NonModal)
        self.dlg.setAttribute(Qt.WA_DeleteOnClose, True)
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        self.dlg.pick_center_btn.clicked.connect(self.set_map_tool)
        #self.dlg.exec_()
        # See if OK was pressed
        #if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.

    def set_map_tool(self):
        self.map_tool = QgsMapToolEmitPoint(iface.mapCanvas())
        self.map_tool.canvasClicked.connect(self.set_center)
        iface.mapCanvas().setMapTool(self.map_tool)

    def set_center(self, point):
        try:
            self.center_point = point
            self.dlg.center_label.setText(f"Center: {point.x():.5f}, {point.y():.5f}")
            self.update_spiral_lines()
        except Exception as e:
            import traceback, sys
            print("Error in set_center:", e, file=sys.stderr)
            traceback.print_exc()


    def remove_group(self, group_name):
        """Remove existing group and its layers"""
        project = QgsProject.instance()
        root = project.layerTreeRoot()

        group_node = root.findGroup(group_name)
        if not group_node:
            return

        # Collect all layers in the group
        layers_to_remove = []
        def collect_layers(node):
            if isinstance(node, QgsLayerTreeLayer):
                layers_to_remove.append(node.layer())
            for child in node.children():
                collect_layers(child)

        collect_layers(group_node)

        # Remove group from layer tree
        parent = group_node.parent()
        parent.removeChildNode(group_node)

        # Remove layers from project
        for layer in layers_to_remove:
            project.removeMapLayer(layer)

    def get_antipode(self, lon, lat):
        """Calculate antipodal point with normalization"""
        lat_a = -lat
        lon_a = lon + 180 if lon <= 0 else lon - 180

        # Normalize longitude
        if lon_a > 180:
            lon_a -= 360
        elif lon_a < -180:
            lon_a += 360

        return lon_a, lat_a

    def generate_spiral_points(self, start_lon, start_lat, min_point_distance, azimuth, is_cw):
        """Generate spiral points ending at antipode"""
        # Calculate antipode first
        antipode_lon, antipode_lat = self.get_antipode(start_lon, start_lat)

        # Calculate total distance to antipode
        _, _, total_dist_m = self.geod.inv(start_lon, start_lat, antipode_lon, antipode_lat)
        total_dist_km = total_dist_m / 1000

        # Calculate growth parameters
        growth_factor = math.log(1 / self.params['spiral_ratio'])
        rotations = 10 * self.params['density']  # Adjust rotations by density

        points = [QgsPointXY(start_lon, start_lat)]
        prev_lon, prev_lat = start_lon, start_lat
        min_dist_m = min_point_distance * 1000  # Convert to meters

        # Generate points until we reach antipode proximity
        for i in range(1, self.params['spiral_stepping']):
            t = i / self.params['spiral_stepping']

            # Calculate angle with rotation control
            angle = (azimuth + rotations * 360 * t) % 360
            if not is_cw:
                angle = (360 - angle) % 360

            # Exponential distance calculation
            dist_km = total_dist_km * (math.exp(t * growth_factor) - 1) / (math.exp(growth_factor) - 1)
            lon, lat, _ = self.geod.fwd(start_lon, start_lat, angle, dist_km * 1000)

            # Skip points closer than minimum distance
            _, _, dist_to_prev = self.geod.inv(prev_lon, prev_lat, lon, lat)
            if dist_to_prev < min_dist_m:
                continue

            points.append(QgsPointXY(lon, lat))
            prev_lon, prev_lat = lon, lat

            # Check if we're close to antipode
            if (abs(lon - antipode_lon) < self.params['cut_off_points'] and
                abs(lat - antipode_lat) < self.params['cut_off_points']):
                break

        # Always add antipode as the final point
        points.append(QgsPointXY(antipode_lon, antipode_lat))

        return points
    def create_spiral_layer(self, group, direction, index, min_point_distance, azimuth, is_cw):
        """Create a single spiral line layer"""
        layer_name = f"{group}_{direction}_{index}"
        layer = QgsVectorLayer("LineString?crs=EPSG:4326", layer_name, "memory")
        provider = layer.dataProvider()
        provider.addAttributes([
            QgsField("direction", QVariant.String),
            QgsField("azimuth", QVariant.Double),
            QgsField("type", QVariant.String)
        ])
        layer.updateFields()

        # Generate spiral points
        points = self.generate_spiral_points(
            self.center_point.x(),
            self.center_point.y(),
            min_point_distance,
            azimuth,
            is_cw
        )

        # Create line feature
        line = QgsLineString(points)
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry(line))
        feature.setAttributes([
            direction,
            azimuth,
            "cw" if is_cw else "ccw"
        ])

        provider.addFeatures([feature])
        layer.updateExtents()
        return layer

    def update_spiral_lines(self):
        """Update spiral lines automatically when parameters change"""
        if not self.center_point:
            return

        # Get bearing values from UI
        try:
            bearing_cw = float(self.dlg.bearing_input_cw.text())
            bearing_ccw = float(self.dlg.bearing_input_ccw.text())
            min_point_dist = float(self.dlg.min_point_dist.text())
        except ValueError:
            return

        # Clear previous group if exists
        current_group_name = self.dlg.group_name.text()
        if self.last_used_group_name:
            self.remove_group(self.last_used_group_name)

        project = QgsProject.instance()
        root = project.layerTreeRoot()

        # Create new layer groups
        main_group = root.insertGroup(0, current_group_name)
        cw_group = main_group.addGroup("cw")
        ccw_group = main_group.addGroup("ccw")

        # Generate CW spirals
        for i, cb in enumerate(self.cw_checks):
            if cb.isChecked():
                azimuth = i * bearing_cw
                layer = self.create_spiral_layer(
                    current_group_name,
                    "cw",
                    i+1,
                    min_point_dist,
                    azimuth,
                    True  # is_cw
                )
                project.addMapLayer(layer, False)
                cw_group.addLayer(layer)

        # Generate CCW spirals
        for i, cb in enumerate(self.ccw_checks):
            if cb.isChecked():
                azimuth = i * bearing_ccw
                layer = self.create_spiral_layer(
                    current_group_name,
                    "ccw",
                    i+1,
                    min_point_dist,
                    azimuth,
                    False  # is_cw
                )
                project.addMapLayer(layer, False)
                ccw_group.addLayer(layer)

        # Refresh map and track group
        self.iface.mapCanvas().refreshAllLayers()
        self.last_used_group_name = current_group_name
